// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.8.0
// source: pkg/grpc_pb/grpc_pb.proto

package grpc_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimpleClient is the client API for Simple service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleClient interface {
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetLogs(ctx context.Context, in *GetLogRequest, opts ...grpc.CallOption) (Simple_GetLogsClient, error)
	ReportLogs(ctx context.Context, opts ...grpc.CallOption) (Simple_ReportLogsClient, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (Simple_ChatClient, error)
}

type simpleClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleClient(cc grpc.ClientConnInterface) SimpleClient {
	return &simpleClient{cc}
}

func (c *simpleClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/grpc_pb.Simple/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleClient) GetLogs(ctx context.Context, in *GetLogRequest, opts ...grpc.CallOption) (Simple_GetLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Simple_ServiceDesc.Streams[0], "/grpc_pb.Simple/GetLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleGetLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Simple_GetLogsClient interface {
	Recv() (*GetLogStream, error)
	grpc.ClientStream
}

type simpleGetLogsClient struct {
	grpc.ClientStream
}

func (x *simpleGetLogsClient) Recv() (*GetLogStream, error) {
	m := new(GetLogStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simpleClient) ReportLogs(ctx context.Context, opts ...grpc.CallOption) (Simple_ReportLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Simple_ServiceDesc.Streams[1], "/grpc_pb.Simple/ReportLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleReportLogsClient{stream}
	return x, nil
}

type Simple_ReportLogsClient interface {
	Send(*ReportLogStream) error
	CloseAndRecv() (*ReportLogResponse, error)
	grpc.ClientStream
}

type simpleReportLogsClient struct {
	grpc.ClientStream
}

func (x *simpleReportLogsClient) Send(m *ReportLogStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simpleReportLogsClient) CloseAndRecv() (*ReportLogResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReportLogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simpleClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Simple_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Simple_ServiceDesc.Streams[2], "/grpc_pb.Simple/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleChatClient{stream}
	return x, nil
}

type Simple_ChatClient interface {
	Send(*ChatStream) error
	Recv() (*ChatStream, error)
	grpc.ClientStream
}

type simpleChatClient struct {
	grpc.ClientStream
}

func (x *simpleChatClient) Send(m *ChatStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simpleChatClient) Recv() (*ChatStream, error) {
	m := new(ChatStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimpleServer is the server API for Simple service.
// All implementations should embed UnimplementedSimpleServer
// for forward compatibility
type SimpleServer interface {
	Status(context.Context, *StatusRequest) (*StatusReply, error)
	GetLogs(*GetLogRequest, Simple_GetLogsServer) error
	ReportLogs(Simple_ReportLogsServer) error
	Chat(Simple_ChatServer) error
}

// UnimplementedSimpleServer should be embedded to have forward compatible implementations.
type UnimplementedSimpleServer struct {
}

func (UnimplementedSimpleServer) Status(context.Context, *StatusRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedSimpleServer) GetLogs(*GetLogRequest, Simple_GetLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedSimpleServer) ReportLogs(Simple_ReportLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportLogs not implemented")
}
func (UnimplementedSimpleServer) Chat(Simple_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}

// UnsafeSimpleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleServer will
// result in compilation errors.
type UnsafeSimpleServer interface {
	mustEmbedUnimplementedSimpleServer()
}

func RegisterSimpleServer(s grpc.ServiceRegistrar, srv SimpleServer) {
	s.RegisterService(&Simple_ServiceDesc, srv)
}

func _Simple_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_pb.Simple/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simple_GetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SimpleServer).GetLogs(m, &simpleGetLogsServer{stream})
}

type Simple_GetLogsServer interface {
	Send(*GetLogStream) error
	grpc.ServerStream
}

type simpleGetLogsServer struct {
	grpc.ServerStream
}

func (x *simpleGetLogsServer) Send(m *GetLogStream) error {
	return x.ServerStream.SendMsg(m)
}

func _Simple_ReportLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleServer).ReportLogs(&simpleReportLogsServer{stream})
}

type Simple_ReportLogsServer interface {
	SendAndClose(*ReportLogResponse) error
	Recv() (*ReportLogStream, error)
	grpc.ServerStream
}

type simpleReportLogsServer struct {
	grpc.ServerStream
}

func (x *simpleReportLogsServer) SendAndClose(m *ReportLogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simpleReportLogsServer) Recv() (*ReportLogStream, error) {
	m := new(ReportLogStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Simple_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleServer).Chat(&simpleChatServer{stream})
}

type Simple_ChatServer interface {
	Send(*ChatStream) error
	Recv() (*ChatStream, error)
	grpc.ServerStream
}

type simpleChatServer struct {
	grpc.ServerStream
}

func (x *simpleChatServer) Send(m *ChatStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simpleChatServer) Recv() (*ChatStream, error) {
	m := new(ChatStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Simple_ServiceDesc is the grpc.ServiceDesc for Simple service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Simple_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_pb.Simple",
	HandlerType: (*SimpleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Simple_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLogs",
			Handler:       _Simple_GetLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReportLogs",
			Handler:       _Simple_ReportLogs_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _Simple_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/grpc_pb/grpc_pb.proto",
}
